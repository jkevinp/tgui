package questionaire

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/jkevinp/tgui/parser"

	"github.com/go-telegram/bot/models"

	"github.com/go-telegram/bot"
)

type Questionaire struct {
	currentQuestionIndex int
	resultFieldNames     []string
	answersTemp          map[string]string
	onDoneHandler        func(ctx context.Context, b *bot.Bot, update *models.Update, answersByte []byte)
	resultStruct         any
	callbackID           string
	msgIds               []int
	choices              [][]string

	Questions []*Question
}

type Question struct {
	Key     string
	Text    string
	Choices [][]string
	Answer  string
}

func NewBuilder() *Questionaire {
	return &Questionaire{
		Questions: make([]*Question, 0),
	}
}

func (q *Questionaire) AddQuestion(key string, text string, choices [][]string) {
	question := &Question{
		Key:     key,
		Text:    text,
		Choices: choices,
		Answer:  "",
	}

	q.Questions = append(q.Questions, question)

	fmt.Println("added question:", question)

}

func NewByKeys(b *bot.Bot, mapKeysChoice map[string][]string) *Questionaire {

	keys := make([]string, len(mapKeysChoice))
	i := 0

	choices := make([][]string, len(mapKeysChoice))
	for key := range mapKeysChoice {
		keys[i] = key
		if mapKeysChoice[key] != nil {
			choices[i] = mapKeysChoice[key]
		} else {
			choices[i] = []string{}
		}
		i++
	}

	return &Questionaire{

		currentQuestionIndex: 0,
		resultFieldNames:     keys,
		choices:              choices,
		answersTemp:          make(map[string]string),
		callbackID:           "qs" + bot.RandomString(14),
	}
}

// Asks question about each field in the struct
func NewByStruct(b *bot.Bot, answerStruct any) *Questionaire {
	resTags, _ := parser.ParseTGTags(answerStruct)

	fieldNames := make([]string, len(resTags))
	i := 0
	for key := range resTags {
		// fmt.Println("key:", key)
		fieldNames[i] = key
		i++
	}

	fmt.Println("creating questionaire w/ field names:", fieldNames)

	return &Questionaire{
		resultTags:           resTags,
		currentQuestionIndex: 0,
		resultFieldNames:     fieldNames,
		answersTemp:          make(map[string]string),
		resultStruct:         answerStruct,
		callbackID:           "qs" + bot.RandomString(14),
	}
}

// will be called once all questions have been asked
func (q *Questionaire) SetOnDoneHandler(handler func(ctx context.Context, b *bot.Bot, update *models.Update, answersByte []byte)) {
	q.onDoneHandler = handler
}

// Called when all questions have been asked, will pass answer struct marshalled to json bytes
func (q *Questionaire) Done(ctx context.Context, b *bot.Bot, update *models.Update, answersByte []byte) {
	q.onDoneHandler(ctx, b, update, answersByte)

	for _, msgID := range q.msgIds {
		b.DeleteMessage(ctx, &bot.DeleteMessageParams{
			ChatID:    update.Message.Chat.ID,
			MessageID: msgID,
		})
	}
}

func (q *Questionaire) Ask(ctx context.Context, b *bot.Bot, chatID any) {

	currentSubject := q.resultFieldNames[q.currentQuestionIndex]
	fmt.Println("[question] -> ", q.callbackID, "asking question about:", currentSubject, "choices:", q.choices[q.currentQuestionIndex])

	params := &bot.SendMessageParams{
		ChatID:    chatID,
		Text:      "please enter the " + currentSubject + ":",
		ParseMode: models.ParseModeMarkdown,
	}

	if len(q.choices[q.currentQuestionIndex]) > 0 {
		replyKB := models.InlineKeyboardMarkup{}

		for _, choice := range q.choices[q.currentQuestionIndex] {

			var temp = []models.InlineKeyboardButton{}

			temp = append(temp, models.InlineKeyboardButton{
				Text:         choice,
				CallbackData: q.callbackID + ":" + choice,
			})

			replyKB.InlineKeyboard = append(replyKB.InlineKeyboard, temp)

		}

		params.ReplyMarkup = replyKB
	}

	m, err := b.SendMessage(ctx, params)

	if err == nil {
		q.msgIds = append(q.msgIds, m.ID)
	}

}

func (q *Questionaire) Answer(answer string, b *bot.Bot, chatID any) bool {
	currentSubject := q.resultFieldNames[q.currentQuestionIndex]

	q.answersTemp[currentSubject] = answer

	if err := q.TestInput(); err != nil {
		q.answersTemp[currentSubject] = ""

		q.Ask(context.Background(), b, chatID)

		return false
	}

	q.currentQuestionIndex++

	if q.currentQuestionIndex < len(q.resultFieldNames) {
		q.Ask(context.Background(), b, chatID)
	}

	return q.currentQuestionIndex >= len(q.resultFieldNames)
}

func (q *Questionaire) TestInput() error {
	data, err := json.Marshal(q.answersTemp)
	if err != nil {
		return err
	}

	if err := json.Unmarshal(data, &q.resultStruct); err != nil {
		return err
	}

	return nil
}

func GetResultByte(q *Questionaire) ([]byte, error) {
	data, err := json.Marshal(q.answersTemp)
	return data, err
}
